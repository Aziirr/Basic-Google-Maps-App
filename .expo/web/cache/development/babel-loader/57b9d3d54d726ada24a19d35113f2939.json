{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Piotr\\\\OneDrive\\\\Aplikacje\\\\Stefan\\\\Stefan 4 klasa\\\\Expo\\\\map\\\\components\\\\MyButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport register from \"../clickFunctions/register\";\nimport * as Font from \"expo-font\";\n\nvar MyButton = function (_Component) {\n  _inherits(MyButton, _Component);\n\n  var _super = _createSuper(MyButton);\n\n  function MyButton() {\n    var _this;\n\n    _classCallCheck(this, MyButton);\n\n    _this = _super.call(this);\n\n    _this.componentDidMount = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'myFont': require(\"../myfont.ttf\")\n              }));\n\n            case 2:\n              _this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.click = function (event) {\n      if (_this.props.action === 'start') _this.props.navigation.navigate('locations');\n    };\n\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(MyButton, [{\n    key: \"render\",\n    value: function render() {\n      var style = {\n        border: '2px solid black',\n        textAlign: 'center'\n      };\n      return React.createElement(TouchableOpacity, {\n        style: this.style,\n        onPress: this.click,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: 'bold',\n          fontSize: 60,\n          fontFamily: 'myFont'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, \" \", this.props.title, \" \"));\n    }\n  }]);\n\n  return MyButton;\n}(Component);\n\nexport { MyButton as default };\nMyButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  action: PropTypes.string.isRequired,\n  navigation: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["C:/Users/Piotr/OneDrive/Aplikacje/Stefan/Stefan 4 klasa/Expo/map/components/MyButton.js"],"names":["PropTypes","React","Component","register","Font","MyButton","componentDidMount","loadAsync","require","setState","fontLoaded","click","event","props","action","navigation","navigate","state","style","border","textAlign","fontWeight","fontSize","fontFamily","title","propTypes","string","isRequired","object"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAOC,QAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IAEqBC,Q;;;;;AACjB,sBAAc;AAAA;;AAAA;;AACV;;AADU,UAKdC,iBALc,GAKM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACVF,IAAI,CAACG,SAAL,CAAe;AACjB,0BAAUC,OAAO;AADA,eAAf,CADU;;AAAA;AAIhB,oBAAKC,QAAL,CAAc;AAACC,gBAAAA,UAAU,EAAE;AAAb,eAAd;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALN;;AAAA,UAWdC,KAXc,GAWN,UAAAC,KAAK,EAAI;AACb,UAAI,MAAKC,KAAL,CAAWC,MAAX,KAAsB,OAA1B,EACI,MAAKD,KAAL,CAAWE,UAAX,CAAsBC,QAAtB,CAA+B,WAA/B;AACP,KAda;;AAEV,UAAKC,KAAL,GAAa;AAACP,MAAAA,UAAU,EAAE;AAAb,KAAb;AAFU;AAGb;;;;6BAaQ;AACL,UAAMQ,KAAK,GAAG;AACVC,QAAAA,MAAM,EAAE,iBADE;AAEVC,QAAAA,SAAS,EAAE;AAFD,OAAd;AAIA,aACI,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,KAAKF,KAA9B;AAAqC,QAAA,OAAO,EAAE,KAAKP,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACU,UAAAA,UAAU,EAAE,MAAb;AAAqBC,UAAAA,QAAQ,EAAE,EAA/B;AAAmCC,UAAAA,UAAU,EAAE;AAA/C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAyE,KAAKV,KAAL,CAAWW,KAApF,MADJ,CADJ;AAKH;;;;EA3BiCtB,S;;SAAjBG,Q;AA8BrBA,QAAQ,CAACoB,SAAT,GAAqB;AACjBD,EAAAA,KAAK,EAAExB,SAAS,CAAC0B,MAAV,CAAiBC,UADP;AAEjBb,EAAAA,MAAM,EAAEd,SAAS,CAAC0B,MAAV,CAAiBC,UAFR;AAGjBZ,EAAAA,UAAU,EAAEf,SAAS,CAAC4B,MAAV,CAAiBD;AAHZ,CAArB","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, {Component} from 'react';\r\nimport {View, Text, TouchableOpacity} from \"react-native\";\r\nimport register from \"../clickFunctions/register\";\r\nimport * as Font from \"expo-font\";\r\n\r\nexport default class MyButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {fontLoaded: false}\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await Font.loadAsync({\r\n            'myFont': require('../myfont.ttf'), // Uwaga: proszę w nazwie fonta nie używać dużych liter\r\n        });\r\n        this.setState({fontLoaded: true})\r\n    }\r\n    click = event => {\r\n        if (this.props.action === 'start')\r\n            this.props.navigation.navigate('locations')\r\n    }\r\n\r\n    render() {\r\n        const style = {\r\n            border: '2px solid black',\r\n            textAlign: 'center',\r\n        }\r\n        return (\r\n            <TouchableOpacity style={this.style} onPress={this.click}>\r\n                <Text style={{fontWeight: 'bold', fontSize: 60, fontFamily: 'myFont'}}> {this.props.title} </Text>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n}\r\n\r\nMyButton.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    action: PropTypes.string.isRequired,\r\n    navigation: PropTypes.object.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}